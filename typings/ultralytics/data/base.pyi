"""
This type stub file was generated by pyright.
"""

from typing import Optional
from torch.utils.data import Dataset

class BaseDataset(Dataset):
    """
    Base dataset class for loading and processing image data.

    Args:
        img_path (str): Path to the folder containing images.
        imgsz (int, optional): Image size. Defaults to 640.
        cache (bool, optional): Cache images to RAM or disk during training. Defaults to False.
        augment (bool, optional): If True, data augmentation is applied. Defaults to True.
        hyp (dict, optional): Hyperparameters to apply data augmentation. Defaults to None.
        prefix (str, optional): Prefix to print in log messages. Defaults to ''.
        rect (bool, optional): If True, rectangular training is used. Defaults to False.
        batch_size (int, optional): Size of batches. Defaults to None.
        stride (int, optional): Stride. Defaults to 32.
        pad (float, optional): Padding. Defaults to 0.0.
        single_cls (bool, optional): If True, single class training is used. Defaults to False.
        classes (list): List of included classes. Default is None.
        fraction (float): Fraction of dataset to utilize. Default is 1.0 (use all data).

    Attributes:
        im_files (list): List of image file paths.
        labels (list): List of label data dictionaries.
        ni (int): Number of images in the dataset.
        ims (list): List of loaded images.
        npy_files (list): List of numpy file paths.
        transforms (callable): Image transformation function.
    """
    def __init__(self, img_path, imgsz=..., cache=..., augment=..., hyp=..., prefix=..., rect=..., batch_size=..., stride=..., pad=..., single_cls=..., classes=..., fraction=...) -> None:
        """Initialize BaseDataset with given configuration and options."""
        ...
    
    def get_img_files(self, img_path): # -> list[Any]:
        """Read image files."""
        ...
    
    def update_labels(self, include_class: Optional[list]): # -> None:
        """Update labels to include only these classes (optional)."""
        ...
    
    def load_image(self, i, rect_mode=...): # -> tuple[MatLike | Any, tuple[Any | int, Any | int], tuple[int, ...] | Any] | tuple[Any, Any, Any]:
        """Loads 1 image from dataset index 'i', returns (im, resized hw)."""
        ...
    
    def cache_images(self): # -> None:
        """Cache images to memory or disk."""
        ...
    
    def cache_images_to_disk(self, i): # -> None:
        """Saves an image as an *.npy file for faster loading."""
        ...
    
    def check_cache_disk(self, safety_margin=...): # -> bool:
        """Check image caching requirements vs available disk space."""
        ...
    
    def check_cache_ram(self, safety_margin=...): # -> bool:
        """Check image caching requirements vs available memory."""
        ...
    
    def set_rectangle(self): # -> None:
        """Sets the shape of bounding boxes for YOLO detections as rectangles."""
        ...
    
    def __getitem__(self, index):
        """Returns transformed label information for given index."""
        ...
    
    def get_image_and_label(self, index):
        """Get and return label information from the dataset."""
        ...
    
    def __len__(self): # -> int:
        """Returns the length of the labels list for the dataset."""
        ...
    
    def update_labels_info(self, label):
        """Custom your label format here."""
        ...
    
    def build_transforms(self, hyp=...):
        """
        Users can customize augmentations here.

        Example:
            ```python
            if self.augment:
                # Training transforms
                return Compose([])
            else:
                # Val transforms
                return Compose([])
            ```
        """
        ...
    
    def get_labels(self):
        """
        Users can customize their own format here.

        Note:
            Ensure output is a dictionary with the following keys:
            ```python
            dict(
                im_file=im_file,
                shape=shape,  # format: (height, width)
                cls=cls,
                bboxes=bboxes,  # xywh
                segments=segments,  # xy
                keypoints=keypoints,  # xy
                normalized=True,  # or False
                bbox_format="xyxy",  # or xywh, ltwh
            )
            ```
        """
        ...
    



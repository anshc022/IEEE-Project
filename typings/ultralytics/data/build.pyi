"""
This type stub file was generated by pyright.
"""

from torch.utils.data import dataloader

class InfiniteDataLoader(dataloader.DataLoader):
    """
    Dataloader that reuses workers.

    Uses same syntax as vanilla DataLoader.
    """
    def __init__(self, *args, **kwargs) -> None:
        """Dataloader that infinitely recycles workers, inherits from DataLoader."""
        ...
    
    def __len__(self): # -> int:
        """Returns the length of the batch sampler's sampler."""
        ...
    
    def __iter__(self): # -> Generator[Any, Any, None]:
        """Creates a sampler that repeats indefinitely."""
        ...
    
    def __del__(self): # -> None:
        """Ensure that workers are terminated."""
        ...
    
    def reset(self): # -> None:
        """
        Reset iterator.

        This is useful when we want to modify settings of dataset while training.
        """
        ...
    


class _RepeatSampler:
    """
    Sampler that repeats forever.

    Args:
        sampler (Dataset.sampler): The sampler to repeat.
    """
    def __init__(self, sampler) -> None:
        """Initializes an object that repeats a given sampler indefinitely."""
        ...
    
    def __iter__(self): # -> Generator[Any, Any, NoReturn]:
        """Iterates over the 'sampler' and yields its contents."""
        ...
    


def seed_worker(worker_id): # -> None:
    """Set dataloader worker seed https://pytorch.org/docs/stable/notes/randomness.html#dataloader."""
    ...

def build_yolo_dataset(cfg, img_path, batch, data, mode=..., rect=..., stride=..., multi_modal=...): # -> YOLODataset | YOLOMultiModalDataset:
    """Build YOLO Dataset."""
    ...

def build_grounding(cfg, img_path, json_file, batch, mode=..., rect=..., stride=...): # -> GroundingDataset:
    """Build YOLO Dataset."""
    ...

def build_dataloader(dataset, batch, workers, shuffle=..., rank=...): # -> InfiniteDataLoader:
    """Return an InfiniteDataLoader or DataLoader for training or validation set."""
    ...

def check_source(source): # -> tuple[str | list[Any] | LoadStreams | LoadPilAndNumpy | LoadImagesAndVideos | LoadScreenshots | Image | ndarray[Any, Any] | Tensor, bool, bool, bool, bool, bool]:
    """Check source type and return corresponding flag values."""
    ...

def load_inference_source(source=..., batch=..., vid_stride=..., buffer=...): # -> LoadTensor | str | list[Any] | LoadStreams | LoadPilAndNumpy | LoadImagesAndVideos | LoadScreenshots | Image | ndarray[Any, Any] | Tensor:
    """
    Loads an inference source for object detection and applies necessary transformations.

    Args:
        source (str, Path, Tensor, PIL.Image, np.ndarray): The input source for inference.
        batch (int, optional): Batch size for dataloaders. Default is 1.
        vid_stride (int, optional): The frame interval for video sources. Default is 1.
        buffer (bool, optional): Determined whether stream frames will be buffered. Default is False.

    Returns:
        dataset (Dataset): A dataset object for the specified input source.
    """
    ...


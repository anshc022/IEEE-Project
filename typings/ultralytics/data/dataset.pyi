"""
This type stub file was generated by pyright.
"""

from torch.utils.data import ConcatDataset
from .base import BaseDataset

DATASET_CACHE_VERSION = ...
class YOLODataset(BaseDataset):
    """
    Dataset class for loading object detection and/or segmentation labels in YOLO format.

    Args:
        data (dict, optional): A dataset YAML dictionary. Defaults to None.
        task (str): An explicit arg to point current task, Defaults to 'detect'.

    Returns:
        (torch.utils.data.Dataset): A PyTorch dataset object that can be used for training an object detection model.
    """
    def __init__(self, *args, data=..., task=..., **kwargs) -> None:
        """Initializes the YOLODataset with optional configurations for segments and keypoints."""
        ...
    
    def cache_labels(self, path=...): # -> dict[str, list[Any]]:
        """
        Cache dataset labels, check images and read shapes.

        Args:
            path (Path): Path where to save the cache file. Default is Path("./labels.cache").

        Returns:
            (dict): labels.
        """
        ...
    
    def get_labels(self): # -> Any:
        """Returns dictionary of labels for YOLO training."""
        ...
    
    def build_transforms(self, hyp=...): # -> Compose:
        """Builds and appends transforms to the list."""
        ...
    
    def close_mosaic(self, hyp): # -> None:
        """Sets mosaic, copy_paste and mixup options to 0.0 and builds transformations."""
        ...
    
    def update_labels_info(self, label):
        """
        Custom your label format here.

        Note:
            cls is not with bboxes now, classification and semantic segmentation need an independent cls label
            Can also support classification and semantic segmentation by adding or removing dict keys there.
        """
        ...
    
    @staticmethod
    def collate_fn(batch): # -> dict[Any, Any]:
        """Collates data samples into batches."""
        ...
    


class YOLOMultiModalDataset(YOLODataset):
    """
    Dataset class for loading object detection and/or segmentation labels in YOLO format.

    Args:
        data (dict, optional): A dataset YAML dictionary. Defaults to None.
        task (str): An explicit arg to point current task, Defaults to 'detect'.

    Returns:
        (torch.utils.data.Dataset): A PyTorch dataset object that can be used for training an object detection model.
    """
    def __init__(self, *args, data=..., task=..., **kwargs) -> None:
        """Initializes a dataset object for object detection tasks with optional specifications."""
        ...
    
    def update_labels_info(self, label):
        """Add texts information for multi-modal model training."""
        ...
    
    def build_transforms(self, hyp=...): # -> Compose:
        """Enhances data transformations with optional text augmentation for multi-modal training."""
        ...
    


class GroundingDataset(YOLODataset):
    """Handles object detection tasks by loading annotations from a specified JSON file, supporting YOLO format."""
    def __init__(self, *args, task=..., json_file, **kwargs) -> None:
        """Initializes a GroundingDataset for object detection, loading annotations from a specified JSON file."""
        ...
    
    def get_img_files(self, img_path): # -> list[Any]:
        """The image files would be read in `get_labels` function, return empty list here."""
        ...
    
    def get_labels(self): # -> list[Any]:
        """Loads annotations from a JSON file, filters, and normalizes bounding boxes for each image."""
        ...
    
    def build_transforms(self, hyp=...): # -> Compose:
        """Configures augmentations for training with optional text loading; `hyp` adjusts augmentation intensity."""
        ...
    


class YOLOConcatDataset(ConcatDataset):
    """
    Dataset as a concatenation of multiple datasets.

    This class is useful to assemble different existing datasets.
    """
    @staticmethod
    def collate_fn(batch): # -> dict[Any, Any]:
        """Collates data samples into batches."""
        ...
    


class SemanticDataset(BaseDataset):
    """
    Semantic Segmentation Dataset.

    This class is responsible for handling datasets used for semantic segmentation tasks. It inherits functionalities
    from the BaseDataset class.

    Note:
        This class is currently a placeholder and needs to be populated with methods and attributes for supporting
        semantic segmentation tasks.
    """
    def __init__(self) -> None:
        """Initialize a SemanticDataset object."""
        ...
    


class ClassificationDataset:
    """
    Extends torchvision ImageFolder to support YOLO classification tasks, offering functionalities like image
    augmentation, caching, and verification. It's designed to efficiently handle large datasets for training deep
    learning models, with optional image transformations and caching mechanisms to speed up training.

    This class allows for augmentations using both torchvision and Albumentations libraries, and supports caching images
    in RAM or on disk to reduce IO overhead during training. Additionally, it implements a robust verification process
    to ensure data integrity and consistency.

    Attributes:
        cache_ram (bool): Indicates if caching in RAM is enabled.
        cache_disk (bool): Indicates if caching on disk is enabled.
        samples (list): A list of tuples, each containing the path to an image, its class index, path to its .npy cache
                        file (if caching on disk), and optionally the loaded image array (if caching in RAM).
        torch_transforms (callable): PyTorch transforms to be applied to the images.
    """
    def __init__(self, root, args, augment=..., prefix=...) -> None:
        """
        Initialize YOLO object with root, image size, augmentations, and cache settings.

        Args:
            root (str): Path to the dataset directory where images are stored in a class-specific folder structure.
            args (Namespace): Configuration containing dataset-related settings such as image size, augmentation
                parameters, and cache settings. It includes attributes like `imgsz` (image size), `fraction` (fraction
                of data to use), `scale`, `fliplr`, `flipud`, `cache` (disk or RAM caching for faster training),
                `auto_augment`, `hsv_h`, `hsv_s`, `hsv_v`, and `crop_fraction`.
            augment (bool, optional): Whether to apply augmentations to the dataset. Default is False.
            prefix (str, optional): Prefix for logging and cache filenames, aiding in dataset identification and
                debugging. Default is an empty string.
        """
        ...
    
    def __getitem__(self, i): # -> dict[str, Any]:
        """Returns subset of data and targets corresponding to given indices."""
        ...
    
    def __len__(self) -> int:
        """Return the total number of samples in the dataset."""
        ...
    
    def verify_images(self): # -> Any | list[Any]:
        """Verify all images in dataset."""
        ...
    



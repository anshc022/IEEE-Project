"""
This type stub file was generated by pyright.
"""

import torch

"""
Export a YOLO PyTorch model to other formats. TensorFlow exports authored by https://github.com/zldrobit.

Format                  | `format=argument`         | Model
---                     | ---                       | ---
PyTorch                 | -                         | yolo11n.pt
TorchScript             | `torchscript`             | yolo11n.torchscript
ONNX                    | `onnx`                    | yolo11n.onnx
OpenVINO                | `openvino`                | yolo11n_openvino_model/
TensorRT                | `engine`                  | yolo11n.engine
CoreML                  | `coreml`                  | yolo11n.mlpackage
TensorFlow SavedModel   | `saved_model`             | yolo11n_saved_model/
TensorFlow GraphDef     | `pb`                      | yolo11n.pb
TensorFlow Lite         | `tflite`                  | yolo11n.tflite
TensorFlow Edge TPU     | `edgetpu`                 | yolo11n_edgetpu.tflite
TensorFlow.js           | `tfjs`                    | yolo11n_web_model/
PaddlePaddle            | `paddle`                  | yolo11n_paddle_model/
MNN                     | `mnn`                     | yolo11n.mnn
NCNN                    | `ncnn`                    | yolo11n_ncnn_model/
IMX                     | `imx`                     | yolo11n_imx_model/
RKNN                    | `rknn`                    | yolo11n_rknn_model/

Requirements:
    $ pip install "ultralytics[export]"

Python:
    from ultralytics import YOLO
    model = YOLO('yolo11n.pt')
    results = model.export(format='onnx')

CLI:
    $ yolo mode=export model=yolo11n.pt format=onnx

Inference:
    $ yolo predict model=yolo11n.pt                 # PyTorch
                         yolo11n.torchscript        # TorchScript
                         yolo11n.onnx               # ONNX Runtime or OpenCV DNN with dnn=True
                         yolo11n_openvino_model     # OpenVINO
                         yolo11n.engine             # TensorRT
                         yolo11n.mlpackage          # CoreML (macOS-only)
                         yolo11n_saved_model        # TensorFlow SavedModel
                         yolo11n.pb                 # TensorFlow GraphDef
                         yolo11n.tflite             # TensorFlow Lite
                         yolo11n_edgetpu.tflite     # TensorFlow Edge TPU
                         yolo11n_paddle_model       # PaddlePaddle
                         yolo11n.mnn                # MNN
                         yolo11n_ncnn_model         # NCNN
                         yolo11n_imx_model          # IMX

TensorFlow.js:
    $ cd .. && git clone https://github.com/zldrobit/tfjs-yolov5-example.git && cd tfjs-yolov5-example
    $ npm install
    $ ln -s ../../yolo11n_web_model public/yolo11n_web_model
    $ npm start
"""
def export_formats(): # -> dict[str, tuple[Any, ...]]:
    """Ultralytics YOLO export formats."""
    ...

def validate_args(format, passed_args, valid_args): # -> None:
    """
    Validates arguments based on format.

    Args:
        format (str): The export format.
        passed_args (Namespace): The arguments used during export.
        valid_args (dict): List of valid arguments for the format.

    Raises:
        AssertionError: If an argument that's not supported by the export format is used, or if format doesn't have the supported arguments listed.
    """
    ...

def gd_outputs(gd): # -> list[str]:
    """TensorFlow GraphDef model output node names."""
    ...

def try_export(inner_func): # -> Callable[..., tuple[Any, Any]]:
    """YOLO export decorator, i.e. @try_export."""
    ...

class Exporter:
    """
    A class for exporting a model.

    Attributes:
        args (SimpleNamespace): Configuration for the exporter.
        callbacks (list, optional): List of callback functions. Defaults to None.
    """
    def __init__(self, cfg=..., overrides=..., _callbacks=...) -> None:
        """
        Initializes the Exporter class.

        Args:
            cfg (str, optional): Path to a configuration file. Defaults to DEFAULT_CFG.
            overrides (dict, optional): Configuration overrides. Defaults to None.
            _callbacks (dict, optional): Dictionary of callback functions. Defaults to None.
        """
        ...
    
    def __call__(self, model=...) -> str:
        """Returns list of exported files/dirs after running callbacks."""
        ...
    
    def get_int8_calibration_dataloader(self, prefix=...): # -> InfiniteDataLoader:
        """Build and return a dataloader suitable for calibration of INT8 models."""
        ...
    
    @try_export
    def export_torchscript(self, prefix=...): # -> tuple[Path, None]:
        """YOLO TorchScript model export."""
        ...
    
    @try_export
    def export_onnx(self, prefix=...): # -> tuple[str, Any]:
        """YOLO ONNX export."""
        ...
    
    @try_export
    def export_openvino(self, prefix=...): # -> tuple[str, None]:
        """YOLO OpenVINO export."""
        ...
    
    @try_export
    def export_paddle(self, prefix=...): # -> tuple[str, None]:
        """YOLO Paddle export."""
        ...
    
    @try_export
    def export_mnn(self, prefix=...): # -> tuple[str, None]:
        """YOLOv8 MNN export using MNN https://github.com/alibaba/MNN."""
        ...
    
    @try_export
    def export_ncnn(self, prefix=...): # -> tuple[str, None]:
        """YOLO NCNN export using PNNX https://github.com/pnnx/pnnx."""
        ...
    
    @try_export
    def export_coreml(self, prefix=...): # -> tuple[Path, Any]:
        """YOLO CoreML export."""
        ...
    
    @try_export
    def export_engine(self, dla=..., prefix=...): # -> tuple[Path, None]:
        """YOLO TensorRT export https://developer.nvidia.com/tensorrt."""
        ...
    
    @try_export
    def export_saved_model(self, prefix=...): # -> tuple[str, Any]:
        """YOLO TensorFlow SavedModel export."""
        ...
    
    @try_export
    def export_pb(self, keras_model, prefix=...): # -> tuple[Path, None]:
        """YOLO TensorFlow GraphDef *.pb export https://github.com/leimao/Frozen_Graph_TensorFlow."""
        ...
    
    @try_export
    def export_tflite(self, prefix=...): # -> tuple[str, None]:
        """YOLO TensorFlow Lite export."""
        ...
    
    @try_export
    def export_edgetpu(self, tflite_model=..., prefix=...): # -> tuple[str, None]:
        """YOLO Edge TPU export https://coral.ai/docs/edgetpu/models-intro/."""
        ...
    
    @try_export
    def export_tfjs(self, prefix=...): # -> tuple[str, None]:
        """YOLO TensorFlow.js export."""
        ...
    
    @try_export
    def export_rknn(self, prefix=...): # -> tuple[Path, None]:
        """YOLO RKNN model export."""
        ...
    
    @try_export
    def export_imx(self, prefix=...): # -> tuple[Path, None]:
        """YOLO IMX export."""
        class NMSWrapper(torch.nn.Module):
            ...
        
        
    
    def add_callback(self, event: str, callback): # -> None:
        """Appends the given callback."""
        ...
    
    def run_callbacks(self, event: str): # -> None:
        """Execute all callbacks for a given event."""
        ...
    


class IOSDetectModel(torch.nn.Module):
    """Wrap an Ultralytics YOLO model for Apple iOS CoreML export."""
    def __init__(self, model, im) -> None:
        """Initialize the IOSDetectModel class with a YOLO model and example image."""
        ...
    
    def forward(self, x): # -> tuple[Any, Any]:
        """Normalize predictions of object detection model with input size-dependent factors."""
        ...
    


class NMSModel(torch.nn.Module):
    """Model wrapper with embedded NMS for Detect, Segment, Pose and OBB."""
    def __init__(self, model, args) -> None:
        """
        Initialize the NMSModel.

        Args:
            model (torch.nn.module): The model to wrap with NMS postprocessing.
            args (Namespace): The export arguments.
        """
        ...
    
    def forward(self, x): # -> tuple[Tensor, Any] | Tensor:
        """
        Performs inference with NMS post-processing. Supports Detect, Segment, OBB and Pose.

        Args:
            x (torch.Tensor): The preprocessed tensor with shape (N, 3, H, W).

        Returns:
            out (torch.Tensor): The post-processed results with shape (N, max_det, 4 + 2 + extra_shape).
        """
        ...
    



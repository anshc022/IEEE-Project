"""
This type stub file was generated by pyright.
"""

from ultralytics.utils.torch_utils import smart_inference_mode

"""
Run prediction on images, videos, directories, globs, YouTube, webcam, streams, etc.

Usage - sources:
    $ yolo mode=predict model=yolo11n.pt source=0                               # webcam
                                                img.jpg                         # image
                                                vid.mp4                         # video
                                                screen                          # screenshot
                                                path/                           # directory
                                                list.txt                        # list of images
                                                list.streams                    # list of streams
                                                'path/*.jpg'                    # glob
                                                'https://youtu.be/LNwODJXcvt4'  # YouTube
                                                'rtsp://example.com/media.mp4'  # RTSP, RTMP, HTTP, TCP stream

Usage - formats:
    $ yolo mode=predict model=yolo11n.pt                 # PyTorch
                              yolo11n.torchscript        # TorchScript
                              yolo11n.onnx               # ONNX Runtime or OpenCV DNN with dnn=True
                              yolo11n_openvino_model     # OpenVINO
                              yolo11n.engine             # TensorRT
                              yolo11n.mlpackage          # CoreML (macOS-only)
                              yolo11n_saved_model        # TensorFlow SavedModel
                              yolo11n.pb                 # TensorFlow GraphDef
                              yolo11n.tflite             # TensorFlow Lite
                              yolo11n_edgetpu.tflite     # TensorFlow Edge TPU
                              yolo11n_paddle_model       # PaddlePaddle
                              yolo11n.mnn                # MNN
                              yolo11n_ncnn_model         # NCNN
                              yolo11n_imx_model          # Sony IMX
                              yolo11n_rknn_model         # Rockchip RKNN
"""
STREAM_WARNING = ...
class BasePredictor:
    """
    BasePredictor.

    A base class for creating predictors.

    Attributes:
        args (SimpleNamespace): Configuration for the predictor.
        save_dir (Path): Directory to save results.
        done_warmup (bool): Whether the predictor has finished setup.
        model (nn.Module): Model used for prediction.
        data (dict): Data configuration.
        device (torch.device): Device used for prediction.
        dataset (Dataset): Dataset used for prediction.
        vid_writer (dict): Dictionary of {save_path: video_writer, ...} writer for saving video output.
    """
    def __init__(self, cfg=..., overrides=..., _callbacks=...) -> None:
        """
        Initializes the BasePredictor class.

        Args:
            cfg (str, optional): Path to a configuration file. Defaults to DEFAULT_CFG.
            overrides (dict, optional): Configuration overrides. Defaults to None.
        """
        ...
    
    def preprocess(self, im): # -> Tensor:
        """
        Prepares input image before inference.

        Args:
            im (torch.Tensor | List(np.ndarray)): BCHW for tensor, [(HWC) x B] for list.
        """
        ...
    
    def inference(self, im, *args, **kwargs): # -> Any:
        """Runs inference on a given image using the specified model and arguments."""
        ...
    
    def pre_transform(self, im): # -> list[Any]:
        """
        Pre-transform input image before inference.

        Args:
            im (List(np.ndarray)): (N, 3, h, w) for tensor, [(h, w, 3) x N] for list.

        Returns:
            (list): A list of transformed images.
        """
        ...
    
    def postprocess(self, preds, img, orig_imgs):
        """Post-processes predictions for an image and returns them."""
        ...
    
    def __call__(self, source=..., model=..., stream=..., *args, **kwargs): # -> Generator[Tensor | Any, Any, None] | list[Tensor | Any]:
        """Performs inference on an image or stream."""
        ...
    
    def predict_cli(self, source=..., model=...): # -> None:
        """
        Method used for Command Line Interface (CLI) prediction.

        This function is designed to run predictions using the CLI. It sets up the source and model, then processes
        the inputs in a streaming manner. This method ensures that no outputs accumulate in memory by consuming the
        generator without storing results.

        Note:
            Do not modify this function or remove the generator. The generator ensures that no outputs are
            accumulated in memory, which is critical for preventing memory issues during long-running predictions.
        """
        ...
    
    def setup_source(self, source): # -> None:
        """Sets up source and inference mode."""
        ...
    
    @smart_inference_mode()
    def stream_inference(self, source=..., model=..., *args, **kwargs): # -> Generator[Tensor | Any, Any, None]:
        """Streams real-time inference on camera feed and saves results to file."""
        ...
    
    def setup_model(self, model, verbose=...): # -> None:
        """Initialize YOLO model with given parameters and set it to evaluation mode."""
        ...
    
    def write_results(self, i, p, im, s): # -> str:
        """Write inference results to a file or directory."""
        ...
    
    def save_predicted_images(self, save_path=..., frame=...): # -> None:
        """Save video predictions as mp4 at specified path."""
        ...
    
    def show(self, p=...): # -> None:
        """Display an image in a window using the OpenCV imshow function."""
        ...
    
    def run_callbacks(self, event: str): # -> None:
        """Runs all registered callbacks for a specific event."""
        ...
    
    def add_callback(self, event: str, func): # -> None:
        """Add callback."""
        ...
    



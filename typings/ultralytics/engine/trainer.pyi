"""
This type stub file was generated by pyright.
"""

"""
Train a model on a dataset.

Usage:
    $ yolo mode=train model=yolo11n.pt data=coco8.yaml imgsz=640 epochs=100 batch=16
"""
class BaseTrainer:
    """
    A base class for creating trainers.

    Attributes:
        args (SimpleNamespace): Configuration for the trainer.
        validator (BaseValidator): Validator instance.
        model (nn.Module): Model instance.
        callbacks (defaultdict): Dictionary of callbacks.
        save_dir (Path): Directory to save results.
        wdir (Path): Directory to save weights.
        last (Path): Path to the last checkpoint.
        best (Path): Path to the best checkpoint.
        save_period (int): Save checkpoint every x epochs (disabled if < 1).
        batch_size (int): Batch size for training.
        epochs (int): Number of epochs to train for.
        start_epoch (int): Starting epoch for training.
        device (torch.device): Device to use for training.
        amp (bool): Flag to enable AMP (Automatic Mixed Precision).
        scaler (amp.GradScaler): Gradient scaler for AMP.
        data (str): Path to data.
        trainset (torch.utils.data.Dataset): Training dataset.
        testset (torch.utils.data.Dataset): Testing dataset.
        ema (nn.Module): EMA (Exponential Moving Average) of the model.
        resume (bool): Resume training from a checkpoint.
        lf (nn.Module): Loss function.
        scheduler (torch.optim.lr_scheduler._LRScheduler): Learning rate scheduler.
        best_fitness (float): The best fitness value achieved.
        fitness (float): Current fitness value.
        loss (float): Current loss value.
        tloss (float): Total loss value.
        loss_names (list): List of loss names.
        csv (Path): Path to results CSV file.
    """
    def __init__(self, cfg=..., overrides=..., _callbacks=...) -> None:
        """
        Initializes the BaseTrainer class.

        Args:
            cfg (str, optional): Path to a configuration file. Defaults to DEFAULT_CFG.
            overrides (dict, optional): Configuration overrides. Defaults to None.
        """
        ...
    
    def add_callback(self, event: str, callback): # -> None:
        """Appends the given callback."""
        ...
    
    def set_callback(self, event: str, callback): # -> None:
        """Overrides the existing callbacks with the given callback."""
        ...
    
    def run_callbacks(self, event: str): # -> None:
        """Run all existing callbacks associated with a particular event."""
        ...
    
    def train(self): # -> None:
        """Allow device='', device=None on Multi-GPU systems to default to device=0."""
        ...
    
    def auto_batch(self, max_num_obj=...):
        """Get batch size by calculating memory occupation of model."""
        ...
    
    def read_results_csv(self): # -> dict[Hashable, Any]:
        """Read results.csv into a dict using pandas."""
        ...
    
    def save_model(self): # -> None:
        """Save model training checkpoints with additional metadata."""
        ...
    
    def get_dataset(self): # -> tuple[Any, Any | None]:
        """
        Get train, val path from data dict if it exists.

        Returns None if data format is not recognized.
        """
        ...
    
    def setup_model(self): # -> dict[str, Any] | dict[Any, Any] | None:
        """Load/create/download model for any task."""
        ...
    
    def optimizer_step(self): # -> None:
        """Perform a single step of the training optimizer with gradient clipping and EMA update."""
        ...
    
    def preprocess_batch(self, batch):
        """Allows custom preprocessing model inputs and ground truths depending on task type."""
        ...
    
    def validate(self): # -> tuple[Any, Any]:
        """
        Runs validation on test set using self.validator.

        The returned dict is expected to contain "fitness" key.
        """
        ...
    
    def get_model(self, cfg=..., weights=..., verbose=...):
        """Get model and raise NotImplementedError for loading cfg files."""
        ...
    
    def get_validator(self):
        """Returns a NotImplementedError when the get_validator function is called."""
        ...
    
    def get_dataloader(self, dataset_path, batch_size=..., rank=..., mode=...):
        """Returns dataloader derived from torch.data.Dataloader."""
        ...
    
    def build_dataset(self, img_path, mode=..., batch=...):
        """Build dataset."""
        ...
    
    def label_loss_items(self, loss_items=..., prefix=...): # -> dict[str, Any] | list[str]:
        """
        Returns a loss dict with labelled training loss items tensor.

        Note:
            This is not needed for classification but necessary for segmentation & detection
        """
        ...
    
    def set_model_attributes(self): # -> None:
        """To set or update model parameters before training."""
        ...
    
    def build_targets(self, preds, targets): # -> None:
        """Builds target tensors for training YOLO model."""
        ...
    
    def progress_string(self): # -> Literal['']:
        """Returns a string describing training progress."""
        ...
    
    def plot_training_samples(self, batch, ni): # -> None:
        """Plots training samples during YOLO training."""
        ...
    
    def plot_training_labels(self): # -> None:
        """Plots training labels for YOLO model."""
        ...
    
    def save_metrics(self, metrics): # -> None:
        """Saves training metrics to a CSV file."""
        ...
    
    def plot_metrics(self): # -> None:
        """Plot and display metrics visually."""
        ...
    
    def on_plot(self, name, data=...): # -> None:
        """Registers plots (e.g. to be consumed in callbacks)."""
        ...
    
    def final_eval(self): # -> None:
        """Performs final evaluation and validation for object detection YOLO model."""
        ...
    
    def check_resume(self, overrides): # -> None:
        """Check if resume checkpoint exists and update arguments accordingly."""
        ...
    
    def resume_training(self, ckpt): # -> None:
        """Resume YOLO training from given epoch and best fitness."""
        ...
    
    def build_optimizer(self, model, name=..., lr=..., momentum=..., decay=..., iterations=...): # -> Adam | Any | RMSprop | SGD:
        """
        Constructs an optimizer for the given model, based on the specified optimizer name, learning rate, momentum,
        weight decay, and number of iterations.

        Args:
            model (torch.nn.Module): The model for which to build an optimizer.
            name (str, optional): The name of the optimizer to use. If 'auto', the optimizer is selected
                based on the number of iterations. Default: 'auto'.
            lr (float, optional): The learning rate for the optimizer. Default: 0.001.
            momentum (float, optional): The momentum factor for the optimizer. Default: 0.9.
            decay (float, optional): The weight decay for the optimizer. Default: 1e-5.
            iterations (float, optional): The number of iterations, which determines the optimizer if
                name is 'auto'. Default: 1e5.

        Returns:
            (torch.optim.Optimizer): The constructed optimizer.
        """
        ...
    



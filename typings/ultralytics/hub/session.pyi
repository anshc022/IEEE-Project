"""
This type stub file was generated by pyright.
"""

AGENT_NAME = ...
class HUBTrainingSession:
    """
    HUB training session for Ultralytics HUB YOLO models. Handles model initialization, heartbeats, and checkpointing.

    Attributes:
        model_id (str): Identifier for the YOLO model being trained.
        model_url (str): URL for the model in Ultralytics HUB.
        rate_limits (dict): Rate limits for different API calls (in seconds).
        timers (dict): Timers for rate limiting.
        metrics_queue (dict): Queue for the model's metrics.
        model (dict): Model data fetched from Ultralytics HUB.
    """
    def __init__(self, identifier) -> None:
        """
        Initialize the HUBTrainingSession with the provided model identifier.

        Args:
            identifier (str): Model identifier used to initialize the HUB training session.
                It can be a URL string or a model key with specific format.

        Raises:
            ValueError: If the provided model identifier is invalid.
            ConnectionError: If connecting with global API key is not supported.
            ModuleNotFoundError: If hub-sdk package is not installed.
        """
        ...
    
    @classmethod
    def create_session(cls, identifier, args=...): # -> Self | None:
        """Class method to create an authenticated HUBTrainingSession or return None."""
        ...
    
    def load_model(self, model_id): # -> None:
        """Loads an existing model from Ultralytics HUB using the provided model identifier."""
        ...
    
    def create_model(self, model_args): # -> None:
        """Initializes a HUB training session with the specified model identifier."""
        ...
    
    def request_queue(self, request_func, retry=..., timeout=..., thread=..., verbose=..., progress_total=..., stream_response=..., *args, **kwargs): # -> None:
        """Attempts to execute `request_func` with retries, timeout handling, optional threading, and progress."""
        ...
    
    def upload_metrics(self): # -> None:
        """Upload model metrics to Ultralytics HUB."""
        ...
    
    def upload_model(self, epoch: int, weights: str, is_best: bool = ..., map: float = ..., final: bool = ...) -> None:
        """
        Upload a model checkpoint to Ultralytics HUB.

        Args:
            epoch (int): The current training epoch.
            weights (str): Path to the model weights file.
            is_best (bool): Indicates if the current model is the best one so far.
            map (float): Mean average precision of the model.
            final (bool): Indicates if the model is the final model after training.
        """
        ...
    



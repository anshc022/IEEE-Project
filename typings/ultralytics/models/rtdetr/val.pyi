"""
This type stub file was generated by pyright.
"""

from ultralytics.data import YOLODataset
from ultralytics.models.yolo.detect import DetectionValidator

__all__ = ("RTDETRValidator", )
class RTDETRDataset(YOLODataset):
    """
    Real-Time DEtection and TRacking (RT-DETR) dataset class extending the base YOLODataset class.

    This specialized dataset class is designed for use with the RT-DETR object detection model and is optimized for
    real-time detection and tracking tasks.
    """
    def __init__(self, *args, data=..., **kwargs) -> None:
        """Initialize the RTDETRDataset class by inheriting from the YOLODataset class."""
        ...
    
    def load_image(self, i, rect_mode=...): # -> tuple[MatLike | Any, tuple[Any | int, Any | int], tuple[int, ...] | Any] | tuple[Any, Any, Any]:
        """Loads 1 image from dataset index 'i', returns (im, resized hw)."""
        ...
    
    def build_transforms(self, hyp=...): # -> Compose:
        """Temporary, only for evaluation."""
        ...
    


class RTDETRValidator(DetectionValidator):
    """
    RTDETRValidator extends the DetectionValidator class to provide validation capabilities specifically tailored for
    the RT-DETR (Real-Time DETR) object detection model.

    The class allows building of an RTDETR-specific dataset for validation, applies Non-maximum suppression for
    post-processing, and updates evaluation metrics accordingly.

    Example:
        ```python
        from ultralytics.models.rtdetr import RTDETRValidator

        args = dict(model="rtdetr-l.pt", data="coco8.yaml")
        validator = RTDETRValidator(args=args)
        validator()
        ```

    Note:
        For further details on the attributes and methods, refer to the parent DetectionValidator class.
    """
    def build_dataset(self, img_path, mode=..., batch=...): # -> RTDETRDataset:
        """
        Build an RTDETR Dataset.

        Args:
            img_path (str): Path to the folder containing images.
            mode (str): `train` mode or `val` mode, users are able to customize different augmentations for each mode.
            batch (int, optional): Size of batches, this is for `rect`. Defaults to None.
        """
        ...
    
    def postprocess(self, preds):
        """Apply Non-maximum suppression to prediction outputs."""
        ...
    



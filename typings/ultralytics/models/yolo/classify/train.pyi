"""
This type stub file was generated by pyright.
"""

from ultralytics.engine.trainer import BaseTrainer

class ClassificationTrainer(BaseTrainer):
    """
    A class extending the BaseTrainer class for training based on a classification model.

    Notes:
        - Torchvision classification models can also be passed to the 'model' argument, i.e. model='resnet18'.

    Example:
        ```python
        from ultralytics.models.yolo.classify import ClassificationTrainer

        args = dict(model="yolo11n-cls.pt", data="imagenet10", epochs=3)
        trainer = ClassificationTrainer(overrides=args)
        trainer.train()
        ```
    """
    def __init__(self, cfg=..., overrides=..., _callbacks=...) -> None:
        """Initialize a ClassificationTrainer object with optional configuration overrides and callbacks."""
        ...
    
    def set_model_attributes(self): # -> None:
        """Set the YOLO model's class names from the loaded dataset."""
        ...
    
    def get_model(self, cfg=..., weights=..., verbose=...): # -> ClassificationModel:
        """Returns a modified PyTorch model configured for training YOLO."""
        ...
    
    def setup_model(self): # -> dict[str, Any] | dict[Any, Any] | None:
        """Load, create or download model for any task."""
        ...
    
    def build_dataset(self, img_path, mode=..., batch=...): # -> ClassificationDataset:
        """Creates a ClassificationDataset instance given an image path, and mode (train/test etc.)."""
        ...
    
    def get_dataloader(self, dataset_path, batch_size=..., rank=..., mode=...): # -> InfiniteDataLoader:
        """Returns PyTorch DataLoader with transforms to preprocess images for inference."""
        ...
    
    def preprocess_batch(self, batch):
        """Preprocesses a batch of images and classes."""
        ...
    
    def progress_string(self): # -> str:
        """Returns a formatted string showing training progress."""
        ...
    
    def get_validator(self): # -> ClassificationValidator:
        """Returns an instance of ClassificationValidator for validation."""
        ...
    
    def label_loss_items(self, loss_items=..., prefix=...): # -> list[str] | dict[str, float]:
        """
        Returns a loss dict with labelled training loss items tensor.

        Not needed for classification but necessary for segmentation & detection
        """
        ...
    
    def plot_metrics(self): # -> None:
        """Plots metrics from a CSV file."""
        ...
    
    def final_eval(self): # -> None:
        """Evaluate trained model and save validation results."""
        ...
    
    def plot_training_samples(self, batch, ni): # -> None:
        """Plots training samples with their annotations."""
        ...
    



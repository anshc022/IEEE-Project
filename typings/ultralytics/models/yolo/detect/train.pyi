"""
This type stub file was generated by pyright.
"""

from ultralytics.engine.trainer import BaseTrainer

class DetectionTrainer(BaseTrainer):
    """
    A class extending the BaseTrainer class for training based on a detection model.

    Example:
        ```python
        from ultralytics.models.yolo.detect import DetectionTrainer

        args = dict(model="yolo11n.pt", data="coco8.yaml", epochs=3)
        trainer = DetectionTrainer(overrides=args)
        trainer.train()
        ```
    """
    def build_dataset(self, img_path, mode=..., batch=...): # -> YOLODataset | YOLOMultiModalDataset:
        """
        Build YOLO Dataset.

        Args:
            img_path (str): Path to the folder containing images.
            mode (str): `train` mode or `val` mode, users are able to customize different augmentations for each mode.
            batch (int, optional): Size of batches, this is for `rect`. Defaults to None.
        """
        ...
    
    def get_dataloader(self, dataset_path, batch_size=..., rank=..., mode=...): # -> InfiniteDataLoader:
        """Construct and return dataloader."""
        ...
    
    def preprocess_batch(self, batch):
        """Preprocesses a batch of images by scaling and converting to float."""
        ...
    
    def set_model_attributes(self): # -> None:
        """Nl = de_parallel(self.model).model[-1].nl  # number of detection layers (to scale hyps)."""
        ...
    
    def get_model(self, cfg=..., weights=..., verbose=...): # -> DetectionModel:
        """Return a YOLO detection model."""
        ...
    
    def get_validator(self): # -> DetectionValidator:
        """Returns a DetectionValidator for YOLO model validation."""
        ...
    
    def label_loss_items(self, loss_items=..., prefix=...): # -> dict[str, float] | list[str]:
        """
        Returns a loss dict with labelled training loss items tensor.

        Not needed for classification but necessary for segmentation & detection
        """
        ...
    
    def progress_string(self): # -> LiteralString:
        """Returns a formatted string of training progress with epoch, GPU memory, loss, instances and size."""
        ...
    
    def plot_training_samples(self, batch, ni): # -> None:
        """Plots training samples with their annotations."""
        ...
    
    def plot_metrics(self): # -> None:
        """Plots metrics from a CSV file."""
        ...
    
    def plot_training_labels(self): # -> None:
        """Create a labeled training plot of the YOLO model."""
        ...
    
    def auto_batch(self):
        """Get batch size by calculating memory occupation of model."""
        ...
    



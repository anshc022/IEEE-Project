"""
This type stub file was generated by pyright.
"""

from ultralytics.engine.validator import BaseValidator

class DetectionValidator(BaseValidator):
    """
    A class extending the BaseValidator class for validation based on a detection model.

    Example:
        ```python
        from ultralytics.models.yolo.detect import DetectionValidator

        args = dict(model="yolo11n.pt", data="coco8.yaml")
        validator = DetectionValidator(args=args)
        validator()
        ```
    """
    def __init__(self, dataloader=..., save_dir=..., pbar=..., args=..., _callbacks=...) -> None:
        """Initialize detection model with necessary variables and settings."""
        ...
    
    def preprocess(self, batch):
        """Preprocesses batch of images for YOLO training."""
        ...
    
    def init_metrics(self, model): # -> None:
        """Initialize evaluation metrics for YOLO."""
        ...
    
    def get_desc(self): # -> LiteralString:
        """Return a formatted string summarizing class metrics of YOLO model."""
        ...
    
    def postprocess(self, preds): # -> list[Any]:
        """Apply Non-maximum suppression to prediction outputs."""
        ...
    
    def update_metrics(self, preds, batch): # -> None:
        """Metrics."""
        ...
    
    def finalize_metrics(self, *args, **kwargs): # -> None:
        """Set final values for metrics speed and confusion matrix."""
        ...
    
    def get_stats(self): # -> dict[str, Any | float]:
        """Returns metrics statistics and results dictionary."""
        ...
    
    def print_results(self): # -> None:
        """Prints training/validation set metrics per class."""
        ...
    
    def build_dataset(self, img_path, mode=..., batch=...): # -> YOLODataset | YOLOMultiModalDataset:
        """
        Build YOLO Dataset.

        Args:
            img_path (str): Path to the folder containing images.
            mode (str): `train` mode or `val` mode, users are able to customize different augmentations for each mode.
            batch (int, optional): Size of batches, this is for `rect`. Defaults to None.
        """
        ...
    
    def get_dataloader(self, dataset_path, batch_size): # -> InfiniteDataLoader:
        """Construct and return dataloader."""
        ...
    
    def plot_val_samples(self, batch, ni): # -> None:
        """Plot validation image samples."""
        ...
    
    def plot_predictions(self, batch, preds, ni): # -> None:
        """Plots predicted bounding boxes on input images and saves the result."""
        ...
    
    def save_one_txt(self, predn, save_conf, shape, file): # -> None:
        """Save YOLO detections to a txt file in normalized coordinates in a specific format."""
        ...
    
    def pred_to_json(self, predn, filename): # -> None:
        """Serialize YOLO predictions to COCO json format."""
        ...
    
    def eval_json(self, stats):
        """Evaluates YOLO output in JSON format and returns performance statistics."""
        ...
    



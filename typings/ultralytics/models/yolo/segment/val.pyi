"""
This type stub file was generated by pyright.
"""

from ultralytics.models.yolo.detect import DetectionValidator

class SegmentationValidator(DetectionValidator):
    """
    A class extending the DetectionValidator class for validation based on a segmentation model.

    Example:
        ```python
        from ultralytics.models.yolo.segment import SegmentationValidator

        args = dict(model="yolo11n-seg.pt", data="coco8-seg.yaml")
        validator = SegmentationValidator(args=args)
        validator()
        ```
    """
    def __init__(self, dataloader=..., save_dir=..., pbar=..., args=..., _callbacks=...) -> None:
        """Initialize SegmentationValidator and set task to 'segment', metrics to SegmentMetrics."""
        ...
    
    def preprocess(self, batch):
        """Preprocesses batch by converting masks to float and sending to device."""
        ...
    
    def init_metrics(self, model): # -> None:
        """Initialize metrics and select mask processing function based on save_json flag."""
        ...
    
    def get_desc(self): # -> LiteralString:
        """Return a formatted description of evaluation metrics."""
        ...
    
    def postprocess(self, preds): # -> tuple[list[Any] | Any, Any]:
        """Post-processes YOLO predictions and returns output detections with proto."""
        ...
    
    def update_metrics(self, preds, batch): # -> None:
        """Metrics."""
        ...
    
    def finalize_metrics(self, *args, **kwargs): # -> None:
        """Sets speed and confusion matrix for evaluation metrics."""
        ...
    
    def plot_val_samples(self, batch, ni): # -> None:
        """Plots validation samples with bounding box labels."""
        ...
    
    def plot_predictions(self, batch, preds, ni): # -> None:
        """Plots batch predictions with masks and bounding boxes."""
        ...
    
    def save_one_txt(self, predn, pred_masks, save_conf, shape, file): # -> None:
        """Save YOLO detections to a txt file in normalized coordinates in a specific format."""
        ...
    
    def pred_to_json(self, predn, filename, pred_masks): # -> None:
        """
        Save one JSON result.

        Examples:
             >>> result = {"image_id": 42, "category_id": 18, "bbox": [258.15, 41.29, 348.26, 243.78], "score": 0.236}
        """
        ...
    
    def eval_json(self, stats):
        """Return COCO-style object detection evaluation metrics."""
        ...
    



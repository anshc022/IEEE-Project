"""
This type stub file was generated by pyright.
"""

from typing import Any

class Inference:
    """
    A class to perform object detection, image classification, image segmentation and pose estimation inference using
    Streamlit and Ultralytics YOLO models. It provides the functionalities such as loading models, configuring settings,
    uploading video files, and performing real-time inference.

    Attributes:
        st (module): Streamlit module for UI creation.
        temp_dict (dict): Temporary dictionary to store the model path.
        model_path (str): Path to the loaded model.
        model (YOLO): The YOLO model instance.
        source (str): Selected video source.
        enable_trk (str): Enable tracking option.
        conf (float): Confidence threshold.
        iou (float): IoU threshold for non-max suppression.
        vid_file_name (str): Name of the uploaded video file.
        selected_ind (list): List of selected class indices.

    Methods:
        web_ui: Sets up the Streamlit web interface with custom HTML elements.
        sidebar: Configures the Streamlit sidebar for model and inference settings.
        source_upload: Handles video file uploads through the Streamlit interface.
        configure: Configures the model and loads selected classes for inference.
        inference: Performs real-time object detection inference.

    Examples:
        >>> inf = solutions.Inference(model="path/to/model.pt")  # Model is not necessary argument.
        >>> inf.inference()
    """
    def __init__(self, **kwargs: Any) -> None:
        """
        Initializes the Inference class, checking Streamlit requirements and setting up the model path.

        Args:
            **kwargs (Any): Additional keyword arguments for model configuration.
        """
        ...
    
    def web_ui(self): # -> None:
        """Sets up the Streamlit web interface with custom HTML elements."""
        ...
    
    def sidebar(self): # -> None:
        """Configures the Streamlit sidebar for model and inference settings."""
        ...
    
    def source_upload(self): # -> None:
        """Handles video file uploads through the Streamlit interface."""
        ...
    
    def configure(self): # -> None:
        """Configures the model and loads selected classes for inference."""
        ...
    
    def inference(self): # -> None:
        """Performs real-time object detection inference."""
        ...
    


if __name__ == "__main__":
    args = ...
    model = ...

"""
This type stub file was generated by pyright.
"""

"""Base callbacks."""
def on_pretrain_routine_start(trainer): # -> None:
    """Called before the pretraining routine starts."""
    ...

def on_pretrain_routine_end(trainer): # -> None:
    """Called after the pretraining routine ends."""
    ...

def on_train_start(trainer): # -> None:
    """Called when the training starts."""
    ...

def on_train_epoch_start(trainer): # -> None:
    """Called at the start of each training epoch."""
    ...

def on_train_batch_start(trainer): # -> None:
    """Called at the start of each training batch."""
    ...

def optimizer_step(trainer): # -> None:
    """Called when the optimizer takes a step."""
    ...

def on_before_zero_grad(trainer): # -> None:
    """Called before the gradients are set to zero."""
    ...

def on_train_batch_end(trainer): # -> None:
    """Called at the end of each training batch."""
    ...

def on_train_epoch_end(trainer): # -> None:
    """Called at the end of each training epoch."""
    ...

def on_fit_epoch_end(trainer): # -> None:
    """Called at the end of each fit epoch (train + val)."""
    ...

def on_model_save(trainer): # -> None:
    """Called when the model is saved."""
    ...

def on_train_end(trainer): # -> None:
    """Called when the training ends."""
    ...

def on_params_update(trainer): # -> None:
    """Called when the model parameters are updated."""
    ...

def teardown(trainer): # -> None:
    """Called during the teardown of the training process."""
    ...

def on_val_start(validator): # -> None:
    """Called when the validation starts."""
    ...

def on_val_batch_start(validator): # -> None:
    """Called at the start of each validation batch."""
    ...

def on_val_batch_end(validator): # -> None:
    """Called at the end of each validation batch."""
    ...

def on_val_end(validator): # -> None:
    """Called when the validation ends."""
    ...

def on_predict_start(predictor): # -> None:
    """Called when the prediction starts."""
    ...

def on_predict_batch_start(predictor): # -> None:
    """Called at the start of each prediction batch."""
    ...

def on_predict_batch_end(predictor): # -> None:
    """Called at the end of each prediction batch."""
    ...

def on_predict_postprocess_end(predictor): # -> None:
    """Called after the post-processing of the prediction ends."""
    ...

def on_predict_end(predictor): # -> None:
    """Called when the prediction ends."""
    ...

def on_export_start(exporter): # -> None:
    """Called when the model export starts."""
    ...

def on_export_end(exporter): # -> None:
    """Called when the model export ends."""
    ...

default_callbacks = ...
def get_default_callbacks(): # -> defaultdict[str, list[Any]]:
    """
    Return a copy of the default_callbacks dictionary with lists as default values.

    Returns:
        (defaultdict): A defaultdict with keys from default_callbacks and empty lists as default values.
    """
    ...

def add_integration_callbacks(instance): # -> None:
    """
    Add integration callbacks from various sources to the instance's callbacks.

    Args:
        instance (Trainer, Predictor, Validator, Exporter): An object with a 'callbacks' attribute that is a dictionary
            of callback lists.
    """
    ...

